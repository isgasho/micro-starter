// Code generated by protoc-gen-micro. DO NOT EDIT.
// source: rbac.proto

package rbac

import (
	fmt "fmt"
	proto "github.com/golang/protobuf/proto"
	math "math"
)

import (
	context "context"
	api "github.com/micro/go-micro/v3/api"
	client "github.com/micro/go-micro/v3/client"
	server "github.com/micro/go-micro/v3/server"
)

// Reference imports to suppress errors if they are not otherwise used.
var _ = proto.Marshal
var _ = fmt.Errorf
var _ = math.Inf

// This is a compile-time assertion to ensure that this generated file
// is compatible with the proto package it is being compiled against.
// A compilation error at this line likely means your copy of the
// proto package needs to be updated.
const _ = proto.ProtoPackageIsVersion3 // please upgrade the proto package

// Reference imports to suppress errors if they are not otherwise used.
var _ api.Endpoint
var _ context.Context
var _ client.Option
var _ server.Option

// Api Endpoints for Rbac service

func NewRbacEndpoints() []*api.Endpoint {
	return []*api.Endpoint{}
}

// Client API for Rbac service

type RbacService interface {
	AddUser(ctx context.Context, in *User, opts ...client.CallOption) (*Response, error)
	RemoveUser(ctx context.Context, in *Request, opts ...client.CallOption) (*Response, error)
	QueryUserRoles(ctx context.Context, in *Request, opts ...client.CallOption) (*Roles, error)
	QueryUserResources(ctx context.Context, in *Request, opts ...client.CallOption) (*Resources, error)
	LinkUserRole(ctx context.Context, in *LinkRequest, opts ...client.CallOption) (*Response, error)
	UnlinkUserRole(ctx context.Context, in *LinkRequest, opts ...client.CallOption) (*Response, error)
	AddRole(ctx context.Context, in *Role, opts ...client.CallOption) (*Response, error)
	RemoveRole(ctx context.Context, in *Request, opts ...client.CallOption) (*Response, error)
	QueryRoleResources(ctx context.Context, in *Request, opts ...client.CallOption) (*Resources, error)
	LinkRoleResource(ctx context.Context, in *LinkRequest, opts ...client.CallOption) (*Response, error)
	UnlinkRoleResource(ctx context.Context, in *LinkRequest, opts ...client.CallOption) (*Response, error)
	AddResource(ctx context.Context, in *Resource, opts ...client.CallOption) (*Response, error)
	RemoveResource(ctx context.Context, in *Request, opts ...client.CallOption) (*Response, error)
}

type rbacService struct {
	c    client.Client
	name string
}

func NewRbacService(name string, c client.Client) RbacService {
	return &rbacService{
		c:    c,
		name: name,
	}
}

func (c *rbacService) AddUser(ctx context.Context, in *User, opts ...client.CallOption) (*Response, error) {
	req := c.c.NewRequest(c.name, "Rbac.AddUser", in)
	out := new(Response)
	err := c.c.Call(ctx, req, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *rbacService) RemoveUser(ctx context.Context, in *Request, opts ...client.CallOption) (*Response, error) {
	req := c.c.NewRequest(c.name, "Rbac.RemoveUser", in)
	out := new(Response)
	err := c.c.Call(ctx, req, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *rbacService) QueryUserRoles(ctx context.Context, in *Request, opts ...client.CallOption) (*Roles, error) {
	req := c.c.NewRequest(c.name, "Rbac.QueryUserRoles", in)
	out := new(Roles)
	err := c.c.Call(ctx, req, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *rbacService) QueryUserResources(ctx context.Context, in *Request, opts ...client.CallOption) (*Resources, error) {
	req := c.c.NewRequest(c.name, "Rbac.QueryUserResources", in)
	out := new(Resources)
	err := c.c.Call(ctx, req, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *rbacService) LinkUserRole(ctx context.Context, in *LinkRequest, opts ...client.CallOption) (*Response, error) {
	req := c.c.NewRequest(c.name, "Rbac.LinkUserRole", in)
	out := new(Response)
	err := c.c.Call(ctx, req, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *rbacService) UnlinkUserRole(ctx context.Context, in *LinkRequest, opts ...client.CallOption) (*Response, error) {
	req := c.c.NewRequest(c.name, "Rbac.UnlinkUserRole", in)
	out := new(Response)
	err := c.c.Call(ctx, req, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *rbacService) AddRole(ctx context.Context, in *Role, opts ...client.CallOption) (*Response, error) {
	req := c.c.NewRequest(c.name, "Rbac.AddRole", in)
	out := new(Response)
	err := c.c.Call(ctx, req, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *rbacService) RemoveRole(ctx context.Context, in *Request, opts ...client.CallOption) (*Response, error) {
	req := c.c.NewRequest(c.name, "Rbac.RemoveRole", in)
	out := new(Response)
	err := c.c.Call(ctx, req, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *rbacService) QueryRoleResources(ctx context.Context, in *Request, opts ...client.CallOption) (*Resources, error) {
	req := c.c.NewRequest(c.name, "Rbac.QueryRoleResources", in)
	out := new(Resources)
	err := c.c.Call(ctx, req, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *rbacService) LinkRoleResource(ctx context.Context, in *LinkRequest, opts ...client.CallOption) (*Response, error) {
	req := c.c.NewRequest(c.name, "Rbac.LinkRoleResource", in)
	out := new(Response)
	err := c.c.Call(ctx, req, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *rbacService) UnlinkRoleResource(ctx context.Context, in *LinkRequest, opts ...client.CallOption) (*Response, error) {
	req := c.c.NewRequest(c.name, "Rbac.UnlinkRoleResource", in)
	out := new(Response)
	err := c.c.Call(ctx, req, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *rbacService) AddResource(ctx context.Context, in *Resource, opts ...client.CallOption) (*Response, error) {
	req := c.c.NewRequest(c.name, "Rbac.AddResource", in)
	out := new(Response)
	err := c.c.Call(ctx, req, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *rbacService) RemoveResource(ctx context.Context, in *Request, opts ...client.CallOption) (*Response, error) {
	req := c.c.NewRequest(c.name, "Rbac.RemoveResource", in)
	out := new(Response)
	err := c.c.Call(ctx, req, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

// Server API for Rbac service

type RbacHandler interface {
	AddUser(context.Context, *User, *Response) error
	RemoveUser(context.Context, *Request, *Response) error
	QueryUserRoles(context.Context, *Request, *Roles) error
	QueryUserResources(context.Context, *Request, *Resources) error
	LinkUserRole(context.Context, *LinkRequest, *Response) error
	UnlinkUserRole(context.Context, *LinkRequest, *Response) error
	AddRole(context.Context, *Role, *Response) error
	RemoveRole(context.Context, *Request, *Response) error
	QueryRoleResources(context.Context, *Request, *Resources) error
	LinkRoleResource(context.Context, *LinkRequest, *Response) error
	UnlinkRoleResource(context.Context, *LinkRequest, *Response) error
	AddResource(context.Context, *Resource, *Response) error
	RemoveResource(context.Context, *Request, *Response) error
}

func RegisterRbacHandler(s server.Server, hdlr RbacHandler, opts ...server.HandlerOption) error {
	type rbac interface {
		AddUser(ctx context.Context, in *User, out *Response) error
		RemoveUser(ctx context.Context, in *Request, out *Response) error
		QueryUserRoles(ctx context.Context, in *Request, out *Roles) error
		QueryUserResources(ctx context.Context, in *Request, out *Resources) error
		LinkUserRole(ctx context.Context, in *LinkRequest, out *Response) error
		UnlinkUserRole(ctx context.Context, in *LinkRequest, out *Response) error
		AddRole(ctx context.Context, in *Role, out *Response) error
		RemoveRole(ctx context.Context, in *Request, out *Response) error
		QueryRoleResources(ctx context.Context, in *Request, out *Resources) error
		LinkRoleResource(ctx context.Context, in *LinkRequest, out *Response) error
		UnlinkRoleResource(ctx context.Context, in *LinkRequest, out *Response) error
		AddResource(ctx context.Context, in *Resource, out *Response) error
		RemoveResource(ctx context.Context, in *Request, out *Response) error
	}
	type Rbac struct {
		rbac
	}
	h := &rbacHandler{hdlr}
	return s.Handle(s.NewHandler(&Rbac{h}, opts...))
}

type rbacHandler struct {
	RbacHandler
}

func (h *rbacHandler) AddUser(ctx context.Context, in *User, out *Response) error {
	return h.RbacHandler.AddUser(ctx, in, out)
}

func (h *rbacHandler) RemoveUser(ctx context.Context, in *Request, out *Response) error {
	return h.RbacHandler.RemoveUser(ctx, in, out)
}

func (h *rbacHandler) QueryUserRoles(ctx context.Context, in *Request, out *Roles) error {
	return h.RbacHandler.QueryUserRoles(ctx, in, out)
}

func (h *rbacHandler) QueryUserResources(ctx context.Context, in *Request, out *Resources) error {
	return h.RbacHandler.QueryUserResources(ctx, in, out)
}

func (h *rbacHandler) LinkUserRole(ctx context.Context, in *LinkRequest, out *Response) error {
	return h.RbacHandler.LinkUserRole(ctx, in, out)
}

func (h *rbacHandler) UnlinkUserRole(ctx context.Context, in *LinkRequest, out *Response) error {
	return h.RbacHandler.UnlinkUserRole(ctx, in, out)
}

func (h *rbacHandler) AddRole(ctx context.Context, in *Role, out *Response) error {
	return h.RbacHandler.AddRole(ctx, in, out)
}

func (h *rbacHandler) RemoveRole(ctx context.Context, in *Request, out *Response) error {
	return h.RbacHandler.RemoveRole(ctx, in, out)
}

func (h *rbacHandler) QueryRoleResources(ctx context.Context, in *Request, out *Resources) error {
	return h.RbacHandler.QueryRoleResources(ctx, in, out)
}

func (h *rbacHandler) LinkRoleResource(ctx context.Context, in *LinkRequest, out *Response) error {
	return h.RbacHandler.LinkRoleResource(ctx, in, out)
}

func (h *rbacHandler) UnlinkRoleResource(ctx context.Context, in *LinkRequest, out *Response) error {
	return h.RbacHandler.UnlinkRoleResource(ctx, in, out)
}

func (h *rbacHandler) AddResource(ctx context.Context, in *Resource, out *Response) error {
	return h.RbacHandler.AddResource(ctx, in, out)
}

func (h *rbacHandler) RemoveResource(ctx context.Context, in *Request, out *Response) error {
	return h.RbacHandler.RemoveResource(ctx, in, out)
}
