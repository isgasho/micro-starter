// Code generated by protoc-gen-micro. DO NOT EDIT.
// source: proto/auth-demo.proto

package authdemo

import (
	fmt "fmt"
	proto "github.com/golang/protobuf/proto"
	math "math"
)

import (
	context "context"
	api "github.com/micro/go-micro/v3/api"
	client "github.com/micro/go-micro/v3/client"
	server "github.com/micro/go-micro/v3/server"
	microClient "github.com/micro/micro/v3/service/client"
	microServer "github.com/micro/micro/v3/service/server"
)

// Reference imports to suppress errors if they are not otherwise used.
var _ = proto.Marshal
var _ = fmt.Errorf
var _ = math.Inf

// This is a compile-time assertion to ensure that this generated file
// is compatible with the proto package it is being compiled against.
// A compilation error at this line likely means your copy of the
// proto package needs to be updated.
const _ = proto.ProtoPackageIsVersion3 // please upgrade the proto package

// Reference imports to suppress errors if they are not otherwise used.
var _ api.Endpoint
var _ context.Context
var _ client.Option
var _ server.Option
var _ = microServer.Handle
var _ = microClient.Call

// Api Endpoints for AuthDemo service

func NewAuthDemoEndpoints() []*api.Endpoint {
	return []*api.Endpoint{}
}

// Client API for AuthDemo service

type AuthDemoService interface {
	Call(ctx context.Context, in *Request, opts ...client.CallOption) (*Response, error)
	Stream(ctx context.Context, in *StreamingRequest, opts ...client.CallOption) (AuthDemo_StreamService, error)
	PingPong(ctx context.Context, opts ...client.CallOption) (AuthDemo_PingPongService, error)
	//	User
	GetUser(ctx context.Context, in *GetUserArgs, opts ...client.CallOption) (*UserInfo, error)
	InsertUser(ctx context.Context, in *InsertUserArgs, opts ...client.CallOption) (*InsertUserResp, error)
	DeleteUser(ctx context.Context, in *DeleteUserArgs, opts ...client.CallOption) (*DeleteUserResp, error)
	UpdateUser(ctx context.Context, in *UpdateUserArgs, opts ...client.CallOption) (*UserInfo, error)
	//  Role
	GetRole(ctx context.Context, in *GetRoleArgs, opts ...client.CallOption) (*GetRoleResp, error)
	InsertRole(ctx context.Context, in *InsertRoleArgs, opts ...client.CallOption) (*InsertRoleResp, error)
	DeleteRole(ctx context.Context, in *DeleteRoleArgs, opts ...client.CallOption) (*DeleteRoleResp, error)
	UpdateRole(ctx context.Context, in *UpdateRoleArgs, opts ...client.CallOption) (*UpdateRoleResp, error)
}

type authDemoService struct {
	name string
}

func NewAuthDemoService(name string) AuthDemoService {
	return &authDemoService{name: name}
}

func (c *authDemoService) Call(ctx context.Context, in *Request, opts ...client.CallOption) (*Response, error) {
	req := microClient.NewRequest(c.name, "AuthDemo.Call", in)
	out := new(Response)
	err := microClient.Call(ctx, req, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *authDemoService) Stream(ctx context.Context, in *StreamingRequest, opts ...client.CallOption) (AuthDemo_StreamService, error) {
	req := microClient.NewRequest(c.name, "AuthDemo.Stream", &StreamingRequest{})
	stream, err := microClient.Stream(ctx, req, opts...)
	if err != nil {
		return nil, err
	}
	if err := stream.Send(in); err != nil {
		return nil, err
	}
	return &authDemoServiceStream{stream}, nil
}

type AuthDemo_StreamService interface {
	Context() context.Context
	SendMsg(interface{}) error
	RecvMsg(interface{}) error
	Close() error
	Recv() (*StreamingResponse, error)
}

type authDemoServiceStream struct {
	stream client.Stream
}

func (x *authDemoServiceStream) Close() error {
	return x.stream.Close()
}

func (x *authDemoServiceStream) Context() context.Context {
	return x.stream.Context()
}

func (x *authDemoServiceStream) SendMsg(m interface{}) error {
	return x.stream.Send(m)
}

func (x *authDemoServiceStream) RecvMsg(m interface{}) error {
	return x.stream.Recv(m)
}

func (x *authDemoServiceStream) Recv() (*StreamingResponse, error) {
	m := new(StreamingResponse)
	err := x.stream.Recv(m)
	if err != nil {
		return nil, err
	}
	return m, nil
}

func (c *authDemoService) PingPong(ctx context.Context, opts ...client.CallOption) (AuthDemo_PingPongService, error) {
	req := microClient.NewRequest(c.name, "AuthDemo.PingPong", &Ping{})
	stream, err := microClient.Stream(ctx, req, opts...)
	if err != nil {
		return nil, err
	}
	return &authDemoServicePingPong{stream}, nil
}

type AuthDemo_PingPongService interface {
	Context() context.Context
	SendMsg(interface{}) error
	RecvMsg(interface{}) error
	Close() error
	Send(*Ping) error
	Recv() (*Pong, error)
}

type authDemoServicePingPong struct {
	stream client.Stream
}

func (x *authDemoServicePingPong) Close() error {
	return x.stream.Close()
}

func (x *authDemoServicePingPong) Context() context.Context {
	return x.stream.Context()
}

func (x *authDemoServicePingPong) SendMsg(m interface{}) error {
	return x.stream.Send(m)
}

func (x *authDemoServicePingPong) RecvMsg(m interface{}) error {
	return x.stream.Recv(m)
}

func (x *authDemoServicePingPong) Send(m *Ping) error {
	return x.stream.Send(m)
}

func (x *authDemoServicePingPong) Recv() (*Pong, error) {
	m := new(Pong)
	err := x.stream.Recv(m)
	if err != nil {
		return nil, err
	}
	return m, nil
}

func (c *authDemoService) GetUser(ctx context.Context, in *GetUserArgs, opts ...client.CallOption) (*UserInfo, error) {
	req := microClient.NewRequest(c.name, "AuthDemo.GetUser", in)
	out := new(UserInfo)
	err := microClient.Call(ctx, req, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *authDemoService) InsertUser(ctx context.Context, in *InsertUserArgs, opts ...client.CallOption) (*InsertUserResp, error) {
	req := microClient.NewRequest(c.name, "AuthDemo.InsertUser", in)
	out := new(InsertUserResp)
	err := microClient.Call(ctx, req, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *authDemoService) DeleteUser(ctx context.Context, in *DeleteUserArgs, opts ...client.CallOption) (*DeleteUserResp, error) {
	req := microClient.NewRequest(c.name, "AuthDemo.DeleteUser", in)
	out := new(DeleteUserResp)
	err := microClient.Call(ctx, req, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *authDemoService) UpdateUser(ctx context.Context, in *UpdateUserArgs, opts ...client.CallOption) (*UserInfo, error) {
	req := microClient.NewRequest(c.name, "AuthDemo.UpdateUser", in)
	out := new(UserInfo)
	err := microClient.Call(ctx, req, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *authDemoService) GetRole(ctx context.Context, in *GetRoleArgs, opts ...client.CallOption) (*GetRoleResp, error) {
	req := microClient.NewRequest(c.name, "AuthDemo.GetRole", in)
	out := new(GetRoleResp)
	err := microClient.Call(ctx, req, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *authDemoService) InsertRole(ctx context.Context, in *InsertRoleArgs, opts ...client.CallOption) (*InsertRoleResp, error) {
	req := microClient.NewRequest(c.name, "AuthDemo.InsertRole", in)
	out := new(InsertRoleResp)
	err := microClient.Call(ctx, req, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *authDemoService) DeleteRole(ctx context.Context, in *DeleteRoleArgs, opts ...client.CallOption) (*DeleteRoleResp, error) {
	req := microClient.NewRequest(c.name, "AuthDemo.DeleteRole", in)
	out := new(DeleteRoleResp)
	err := microClient.Call(ctx, req, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *authDemoService) UpdateRole(ctx context.Context, in *UpdateRoleArgs, opts ...client.CallOption) (*UpdateRoleResp, error) {
	req := microClient.NewRequest(c.name, "AuthDemo.UpdateRole", in)
	out := new(UpdateRoleResp)
	err := microClient.Call(ctx, req, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

// Server API for AuthDemo service

type AuthDemoHandler interface {
	Call(context.Context, *Request, *Response) error
	Stream(context.Context, *StreamingRequest, AuthDemo_StreamStream) error
	PingPong(context.Context, AuthDemo_PingPongStream) error
	//	User
	GetUser(context.Context, *GetUserArgs, *UserInfo) error
	InsertUser(context.Context, *InsertUserArgs, *InsertUserResp) error
	DeleteUser(context.Context, *DeleteUserArgs, *DeleteUserResp) error
	UpdateUser(context.Context, *UpdateUserArgs, *UserInfo) error
	//  Role
	GetRole(context.Context, *GetRoleArgs, *GetRoleResp) error
	InsertRole(context.Context, *InsertRoleArgs, *InsertRoleResp) error
	DeleteRole(context.Context, *DeleteRoleArgs, *DeleteRoleResp) error
	UpdateRole(context.Context, *UpdateRoleArgs, *UpdateRoleResp) error
}

func RegisterAuthDemoHandler(hdlr AuthDemoHandler, opts ...server.HandlerOption) error {
	type authDemo interface {
		Call(ctx context.Context, in *Request, out *Response) error
		Stream(ctx context.Context, stream server.Stream) error
		PingPong(ctx context.Context, stream server.Stream) error
		GetUser(ctx context.Context, in *GetUserArgs, out *UserInfo) error
		InsertUser(ctx context.Context, in *InsertUserArgs, out *InsertUserResp) error
		DeleteUser(ctx context.Context, in *DeleteUserArgs, out *DeleteUserResp) error
		UpdateUser(ctx context.Context, in *UpdateUserArgs, out *UserInfo) error
		GetRole(ctx context.Context, in *GetRoleArgs, out *GetRoleResp) error
		InsertRole(ctx context.Context, in *InsertRoleArgs, out *InsertRoleResp) error
		DeleteRole(ctx context.Context, in *DeleteRoleArgs, out *DeleteRoleResp) error
		UpdateRole(ctx context.Context, in *UpdateRoleArgs, out *UpdateRoleResp) error
	}
	type AuthDemo struct {
		authDemo
	}
	h := &authDemoHandler{hdlr}
	return microServer.Handle(microServer.NewHandler(&AuthDemo{h}, opts...))
}

type authDemoHandler struct {
	AuthDemoHandler
}

func (h *authDemoHandler) Call(ctx context.Context, in *Request, out *Response) error {
	return h.AuthDemoHandler.Call(ctx, in, out)
}

func (h *authDemoHandler) Stream(ctx context.Context, stream server.Stream) error {
	m := new(StreamingRequest)
	if err := stream.Recv(m); err != nil {
		return err
	}
	return h.AuthDemoHandler.Stream(ctx, m, &authDemoStreamStream{stream})
}

type AuthDemo_StreamStream interface {
	Context() context.Context
	SendMsg(interface{}) error
	RecvMsg(interface{}) error
	Close() error
	Send(*StreamingResponse) error
}

type authDemoStreamStream struct {
	stream server.Stream
}

func (x *authDemoStreamStream) Close() error {
	return x.stream.Close()
}

func (x *authDemoStreamStream) Context() context.Context {
	return x.stream.Context()
}

func (x *authDemoStreamStream) SendMsg(m interface{}) error {
	return x.stream.Send(m)
}

func (x *authDemoStreamStream) RecvMsg(m interface{}) error {
	return x.stream.Recv(m)
}

func (x *authDemoStreamStream) Send(m *StreamingResponse) error {
	return x.stream.Send(m)
}

func (h *authDemoHandler) PingPong(ctx context.Context, stream server.Stream) error {
	return h.AuthDemoHandler.PingPong(ctx, &authDemoPingPongStream{stream})
}

type AuthDemo_PingPongStream interface {
	Context() context.Context
	SendMsg(interface{}) error
	RecvMsg(interface{}) error
	Close() error
	Send(*Pong) error
	Recv() (*Ping, error)
}

type authDemoPingPongStream struct {
	stream server.Stream
}

func (x *authDemoPingPongStream) Close() error {
	return x.stream.Close()
}

func (x *authDemoPingPongStream) Context() context.Context {
	return x.stream.Context()
}

func (x *authDemoPingPongStream) SendMsg(m interface{}) error {
	return x.stream.Send(m)
}

func (x *authDemoPingPongStream) RecvMsg(m interface{}) error {
	return x.stream.Recv(m)
}

func (x *authDemoPingPongStream) Send(m *Pong) error {
	return x.stream.Send(m)
}

func (x *authDemoPingPongStream) Recv() (*Ping, error) {
	m := new(Ping)
	if err := x.stream.Recv(m); err != nil {
		return nil, err
	}
	return m, nil
}

func (h *authDemoHandler) GetUser(ctx context.Context, in *GetUserArgs, out *UserInfo) error {
	return h.AuthDemoHandler.GetUser(ctx, in, out)
}

func (h *authDemoHandler) InsertUser(ctx context.Context, in *InsertUserArgs, out *InsertUserResp) error {
	return h.AuthDemoHandler.InsertUser(ctx, in, out)
}

func (h *authDemoHandler) DeleteUser(ctx context.Context, in *DeleteUserArgs, out *DeleteUserResp) error {
	return h.AuthDemoHandler.DeleteUser(ctx, in, out)
}

func (h *authDemoHandler) UpdateUser(ctx context.Context, in *UpdateUserArgs, out *UserInfo) error {
	return h.AuthDemoHandler.UpdateUser(ctx, in, out)
}

func (h *authDemoHandler) GetRole(ctx context.Context, in *GetRoleArgs, out *GetRoleResp) error {
	return h.AuthDemoHandler.GetRole(ctx, in, out)
}

func (h *authDemoHandler) InsertRole(ctx context.Context, in *InsertRoleArgs, out *InsertRoleResp) error {
	return h.AuthDemoHandler.InsertRole(ctx, in, out)
}

func (h *authDemoHandler) DeleteRole(ctx context.Context, in *DeleteRoleArgs, out *DeleteRoleResp) error {
	return h.AuthDemoHandler.DeleteRole(ctx, in, out)
}

func (h *authDemoHandler) UpdateRole(ctx context.Context, in *UpdateRoleArgs, out *UpdateRoleResp) error {
	return h.AuthDemoHandler.UpdateRole(ctx, in, out)
}
